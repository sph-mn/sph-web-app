#!/usr/bin/guile
!#

;depends on "cp" and "sed"
(import (sph) (sph alist) (only (sph one) program-path) (sph filesystem) (sph cli))
(define path-project-example "/usr/share/sph/web/app/project-example")
(define path-project-minimal "/usr/share/sph/web/app/project-minimal")

(define (create-new-project path options)
  (let*
    ( (example? (alist-quoted-ref options example))
      (source-path (if example? path-project-example path-project-minimal)))
    (if (file-exists? source-path)
      (begin (ensure-directory-structure path)
        (let
          (sed-file-paths
            (if example?
              (begin
                (system* "cp" "--dereference"
                  "--recursive" "--preserve=mode" "--no-target-directory" source-path path)
                (list (string-append path "branch/main.scm")))
              (begin
                (system* "cp" "--dereference"
                  "--preserve=mode" "--recursive" "--no-target-directory" source-path path)
                (list))))
          (apply system* "sed"
            "-i" (string-append "s/project-name/" (basename path) "/g")
            (string-append path "init.scm") sed-file-paths)))
      (throw (q source-path-not-found) source-path))))

(define (web-app options)
  (let (target-path (alist-ref options (q target)))
    (if target-path
      (let (target-path (path->full-path target-path))
        (if (file-exists? target-path) (simple-format #t "fail - \"~A\" exists\n" target-path)
          (begin (create-new-project (ensure-trailing-slash target-path) options)
            (simple-format #t "created ~A\n" target-path))))
      (begin (simple-format #t "please specify a target path or name\n") (exit)))))

(define command-line-interface
  (cli-create #:description "creates new (web app) projects"
    #:options (ql ((target)) (example #f #f #f #f #f "creates an example project structure"))))

(let (arguments (command-line-interface))
  (if (null? arguments) (command-line-interface (list "--help")) (web-app arguments)))
